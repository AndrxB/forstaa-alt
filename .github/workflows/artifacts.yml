name: Upload artifact

on:
  workflow_run:
    workflows: ["Bump Version and Create Release"]  # The name of the workflow you want to depend on
    types:
      - completed  # Triggers this workflow when the specified workflow is completed

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history, including tags

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Build the React app
      - name: Build the React app
        run: npm run build

      # Step 5: Compress the build folder into a ZIP file
      - name: Compress build folder to ZIP
        run: zip -r ./website.zip ./dist ./README.md

      # Step 6: Upload the ZIP file as an artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: School-Website  # Match this name in the release job
          path: ./website.zip
      
  release:
    runs-on: ubuntu-latest
    needs: build  # Ensure it runs after the build job

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history, including tags

      # Step 2: Download the artifact uploaded in the build job
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: School-Website  # This matches the artifact name in the build job
          path: ./  # Download to the current working directory

      # Step 3: Get the latest Git tag
      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "No tags found")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV

      # Step 4: List the contents of the directory for debugging purposes
      - name: List directory contents
        run: ls -R .

      # Step 5: Create a GitHub release and attach the ZIP file
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.latest_tag }}  # Use the latest tag here
          files: ./website.zip  # Attach the ZIP file to the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
